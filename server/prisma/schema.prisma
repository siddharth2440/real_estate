// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  email      String      @unique
  password   String
  username   String      @unique
  avatar     String?
  createdAt  DateTime    @default(now())
  posts      Post[]      @relation("user")
  savedPosts SavedPost[] @relation("user_post_relation")
  chats      Chat[]      @relation(fields: [chatIds], references: [id])
  chatIds    String[]    @db.ObjectId
}

model Post {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  price      Int
  images     String[]
  address    String
  city       String
  bedroom    Int
  bathroom   Int
  latitude   String
  longitude  String
  type       Type
  property   Property
  user       User        @relation("user", fields: [userId], references: [id])
  userId     String      @db.ObjectId
  postDetail PostDetail? @relation("Post")
  savedPosts SavedPost[] @relation("post_savedPost_relation")
}

enum Type {
  buy
  rent
}

enum Property {
  apartment
  house
  condo
  land
}

model PostDetail {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  desc        String
  utilities   String?
  pet         String?
  income      String?
  size        Int?
  school      Int?
  bus         Int?
  restaurants Int?
  post        Post    @relation("Post", fields: [postId], references: [id])
  postId      String  @unique @db.ObjectId
}

model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation("user_post_relation", fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
  post      Post     @relation("post_savedPost_relation", fields: [postId], references: [id])
  postId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Chat {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  users       User[]    @relation(fields: [userIds], references: [id]) // that string is used to distinguish from other relation so that we can use
  userIds     String[]  @db.ObjectId
  seenBy      String[]  @db.ObjectId
  createdAt   DateTime  @default(now())
  messages    Message[] @relation("messages")
  lastMessage String?
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  text      String
  createdAt DateTime @default(now())
  chat      Chat     @relation("messages", fields: [chatId], references: [id])
  chatId    String   @db.ObjectId
}
